// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using TransportTrack;
//
//    var resVehicleTrack = resVehicleTrack.FromJson(jsonString);

namespace TransportTrack
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class resVehicleTrack
    {
        [JsonProperty("result")]
        public Result Result { get; set; }

        [JsonProperty("Details")]
        public resVehicleDetail[] Details { get; set; }
    }

    public partial class resVehicleDetail
    {
        [JsonProperty("LocationTime")]
        public DateTimeOffset LocationTime { get; set; }

        [JsonProperty("Latitude")]
        public string Latitude { get; set; }

        [JsonProperty("longitude")]
        public string Longitude { get; set; }

        [JsonProperty("Speed")]
        public long Speed { get; set; }

        [JsonProperty("BatteryPercent")]
        public long BatteryPercent { get; set; }

        [JsonProperty("IsIgnitionOn")]
        public bool IsIgnitionOn { get; set; }

        [JsonProperty("Fuelcut")]
        public bool Fuelcut { get; set; }

        [JsonProperty("Mileage")]
        public long Mileage { get; set; }

        [JsonProperty("IMEI")]
        public string Imei { get; set; }

        [JsonProperty("GPRSConnected")]
        public bool GprsConnected { get; set; }

        [JsonProperty("WeakGPS")]
        public bool WeakGps { get; set; }

        [JsonProperty("Aircondition")]
        public bool Aircondition { get; set; }

        [JsonProperty("Alarm")]
        public string Alarm { get; set; }

        [JsonProperty("VehicleNo")]
        public string VehicleNo { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("code")]
        public long Code { get; set; }

        [JsonProperty("msg")]
        public string Msg { get; set; }
    }

    public partial class resVehicleTrack
    {
        public static resVehicleTrack FromJson(string json) => JsonConvert.DeserializeObject<resVehicleTrack>(json, TransportTrack.Converter.Settings);
    }
    public static class Serialize
    {
        public static string ToJson(this resVehicleTrack self) => JsonConvert.SerializeObject(self, TransportTrack.Converter.Settings);
    }
    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
